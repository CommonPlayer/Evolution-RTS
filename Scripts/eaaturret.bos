#define TA // This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece base, turret, barrel1, firepoint1, sfxpoint1, lilypad; // these are the pieces of the model 

static-var CanFire, terraintype;

// Signal definitions
#define SIG_AIM 2 // this is a aim define <- o_O This is a kill flag

// Custom SFX
#define GDMARTY 1024+0

SmokeUnit()// this is a standard smoke point define
{
	var healthpercent, sleeptime, smoketype;
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = SFXTYPE_BLACKSMOKE;
			if( Rand( 1, 66 ) < healthpercent )
				smoketype = SFXTYPE_WHITESMOKE;
			emit-sfx 1026 from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
			sleeptime = 200;
		sleep sleeptime;
	}
}

setSFXoccupy(setSFXoccupy_argument)
{
terraintype = setSFXoccupy_argument;

                if(terraintype == 2)
      {
                move base to y-axis [-0.5] speed [50];
                show lilypad;
                }
      else
      {
                move base to y-axis [0] speed [50];
                hide lilypad;
                }
                if(terraintype == 4)
      {
                move base to y-axis [0] speed [50];
                hide lilypad;
                }
      else
      {
                move base to y-axis [-0.85] speed [50];
                show lilypad;
                }
}

cannotfire()
{
   while( TRUE )
   {
      if (!CanFire)
      {
		emit-sfx 1025 from sfxpoint1;
	  }
	sleep 1500;
   }
}

Create() // tells it what to do on creation
{
	CanFire=TRUE;
	while( get BUILD_PERCENT_LEFT )
		sleep 400;
	start-script SmokeUnit();
	start-script cannotfire();
}

RestoreAfterDelay() // restore function to turn the turret and so forth back to start
{
	sleep 3000;
	turn turret to y-axis <0> speed <60>;
	turn barrel1 to x-axis <0> speed <30>;
}

AimWeapon1(heading, pitch) // aiming animation and firing authorization
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while(!CanFire)
		sleep 200;
	turn turret to y-axis heading speed <5000>;
	turn barrel1 to x-axis <0> - pitch speed <5000>;
	wait-for-turn turret around y-axis;
	wait-for-turn barrel1 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1() // what do while firing, fires 1 barrel then the next , and resets
{
	emit-sfx GDMARTY from firepoint1;
}

AimFromWeapon1(piecenum) // where it aims the weapon from
{
	piecenum = turret;
}

QueryWeapon1(piecenum) // where the shot is created at
{
	piecenum = firepoint1;
}

/*
TechLost()
{
	CanFire=FALSE;
	signal SIG_AIM;
}

TechGranted()
{
	CanFire=TRUE;
}
*/

Killed(severity, corpsetype) // how it explodes 
{ 
	corpsetype = 1; 
	explode turret type EXPLODE_ON_HIT;
	explode barrel1 type EXPLODE_ON_HIT;
} 
